generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  connections Connection[]
  views       ChapterView[]
  password    Password?
  sessions    Session[]
  stories     Story[]
  image       UserImage?
  roles       Role[]       @relation("RoleToUser")

  Comment Comment[]

  UserReadHistory UserReadHistory[]

  Follows Follows[]

  PremiumInterest PremiumInterest[]
}

model Follows {
  id        String   @id @default(cuid())
  followerId String
  storyId    String
  follower   User     @relation(fields: [followerId], references: [id], onDelete: Cascade)
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([followerId, storyId])
}

model Story {
  id           String           @id @default(cuid())
  title        String
  description  String
  authorId     String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  chapters     Chapter[]
  author       User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  views        Int              @default(0)
  embedding    String?          // SQLite doesn't have a native array type, so we'll serialize this as a JSON array

  @@index([authorId])
  @@index([views])
  coverImage   StoryImage?
  UserReadHistory UserReadHistory[]
  Follows Follows[]
}


model Chapter {
  id         String   @id @default(cuid())
  number     Int      @default(1)
  title      String
  content    String
  storyId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  likesCount Int      @default(0)
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  views      ChapterView[]
  comments   Comment[]

  @@index([storyId])
  @@unique([storyId, number])
  @@index([storyId, number])
  @@index([likesCount])
}


model UserReadHistory {
  id        String   @id @default(uuid())
  userId    String
  storyId   String
  readTime  DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@index([userId])
  @@index([storyId])
}

model ChapterView {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chapterId])
}


model Comment {
  id        String    @id @default(cuid())
  content   String
  score     Int       @default(0)
  chapterId String
  chapter   Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([authorId])
  @@index([parentId])
  @@index([chapterId])
}

model StoryImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  storyId     String   @unique
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PremiumInterest {
  id        String   @id @default(cuid())
  userId    String
  tier      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tier])
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}
